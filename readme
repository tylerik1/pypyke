Setup:

This framework uses Python3.  Download the lastest version from https://www.python.org/downloads/.  
Select the advanced setup option and allow the installer to add python to the system path.
Once python is installed, install all the following packages using "pip install -m package_name" from your cmd:

"pip install webdriverwrapper requests boto3 paramiko pylint selenium filelock pandas"


Run first_time_setup.py to configure the framework with the python path

You can update ChromeDriver for windows here https://sites.google.com/a/chromium.org/chromedriver/home
Paste the copy of chromedriver.exe into the root pypyke folder.




Adding tests to test suites:

To add tests to a test suite you can tag tests using the following format:

@tag('regression')
@tag('my_test', 'smoke')


eg. add create_application to the smoke suite and regression suite.

@tag('smoke', 'regression')
def create_application():
    ...
    
OR

@tag('smoke')
@tag('regression')
def create_application():
    ...




Running tests:

Tests can be run as standalone or as part of a test suite.  

    Standalone:
    To run a test as a standalone test, navigate to the location of the test or provide the full path of the file that contains the test.

        running the code to create an application using the REST api.
        eg. python C:\PATH\TO\pypyke\tests\architecture\register_application.py action_rest 


  
    Test suite:
    To run a test suite, navigate to the root \pypyke folder or provide the full path of the "test_set_runner.py" file.  The following
    are the available suites to run:

    single suite
    multiple suites
    all suites

    example to run tests that have been tagged @tag('smoke_test')
    eg. python C:\PATH\TO\pypyke\test_set_runner.py smoke_test

    example to run tests that have been tagged @tag('smoke_test') and @tag('regression_test')
    eg. python C:\PATH\TO\pypyke\test_set_runner.py smoke_test regression_test
    
    




Modifying the framework:
if you plan to add new directories under the architecture or infrastructure folders you will need to add an __init__.py file under that 
directory with the following code.  

"""
import os
import pkgutil

__all__ = list(module for _, module, _ in pkgutil.iter_modules([os.path.dirname(__file__)]))
"""

This will allow the test_set_runner to pickup all of your tests under that directory.  Make sure to also import all the new tests in new directory into the architecture folders
init.py file with the following convention:

"from tests.architecture.new_directory import *"

***take a look at the imports of tests/architecture/init.py as an example***
